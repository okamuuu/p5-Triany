141421356

## 辞書プログラムで使用したアルゴリズムとデータ構造

チェイン法によるハッシュ探索というアルゴリズムを使用しています。
参考URL: http://www.geocities.jp/ky_webid/algorithm/014.html

ここでは連結リスト、線形探索法、ハッシュ関数の簡易的な説明を行います。

## 連結リスト

triany はデータを3カ所しか保存することができません。
ここで triany に4つ以上のデータを格納する方法として方方向リストを使って実現します。

以下のようなデータがあると仮定します。

    my $triany100 = 100 : ['key', 'value', 200];
    my $triany200 = 200 : ['key', 'value',   0];

$triany100 は メモリアドレスが100の場所に保存されていると仮定します。
そのtriany100に保存されている末尾に次のメモリアドレス200を格納してあるので
よって triany100 と triany200 を連結する事によって4つ以上のデータを格納する事ができます。.

## 線形探索法

上述の連結リストを使えばメモリの許す限りデータを保存する事ができます。
このデータ構造で線形探索法を実装する事ができます。

ただし、データ列の先頭から末尾に向かって１つずつ探索するため
データが増加するに従って目的のキーを探索するのに時間がかかってしまいます。

## ハッシュ関数

上記の問題を解決するためにハッシュ関数を利用します。

ハッシュ関数は triany の場所を示す数値を
任意の数値による余剰計算で求める簡易的な方法で実装しています。

以下に例を示します。 

    my $TABLE_SIZE = 10;
    my $triany = 18;
   
    my $hash = $triany % $TABLE_SIZE + 1; // 9

上記では 9 がハッシュ値となるので、
この $triany は 9 というハッシュ値でグルーピングする事ができます。

## まとめ

上記のハッシュ関数を利用すると 1〜10 のアドレスに対してグループ別となるtrinay を
作成する事ができます。

もし新たにkey, value を追加したい場合はそのkey が属するtriany に連結させます。

## 実装コード

https://github.com/okamuuu/p5-Triany
